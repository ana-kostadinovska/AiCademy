@{
    ViewData["Title"] = "Quizzes";
}

<div class="container py-5">
    <h1 class="text-center mb-4 fw-bold" style="color: #ff6200;">Quiz Generator</h1>

    <div id="upload-area" class="border border-2 border-dashed rounded p-5 text-center bg-light mb-4"
         style="cursor: pointer;">
        <input type="file" id="file-input" class="d-none" accept="application/pdf" />
        <p class="mb-0 text-muted">📄 Drag & drop your PDF here, or click to select a file</p>
    </div>

    <div id="file-info" class="text-center mb-3 text-success fw-semibold" style="display: none;"></div>

    <div class="text-center">
        <button id="generate-button" class="btn btn-lg" style="background-color: #ff6200; color: white;" disabled>
            Generate Quizlet
        </button>
    </div>

    <div id="quizlet-output" class="mt-5 d-flex flex-column gap-3"></div>
</div>

<script>
    var flag = false;
    const uploadArea = document.getElementById("upload-area");
    const fileInput = document.getElementById("file-input");
    const fileInfo = document.getElementById("file-info");
    const generateButton = document.getElementById("generate-button");
    const quizletOutput = document.getElementById("quizlet-output");

    let uploadedFileUri = null;

    uploadArea.addEventListener("click", () => fileInput.click());
    uploadArea.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadArea.classList.add("bg-warning-subtle");
    });
    uploadArea.addEventListener("dragleave", () => {
        uploadArea.classList.remove("bg-warning-subtle");
    });
    uploadArea.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadArea.classList.remove("bg-warning-subtle");
        if (e.dataTransfer.files.length > 0) {
            handleFileUpload(e.dataTransfer.files[0]);
        }
    });

    fileInput.addEventListener("change", () => {
        if (fileInput.files.length > 0) {
            handleFileUpload(fileInput.files[0]);
        }
    });

    async function handleFileUpload(file) {
        if (file.type !== "application/pdf") {
            alert("Only PDF files are supported.");
            return;
        }

        const formData = new FormData();
        formData.append("file", file);

        fileInfo.textContent = "Uploading...";
        fileInfo.style.display = "block";

        try {
            const res = await fetch("/upload-file", {
                method: "POST",
                body: formData
            });

            if (!res.ok) throw new Error("Upload failed");

            const data = await res.json();
            console.log(data);
            uploadedFileUri = data.uri;

            fileInfo.textContent = `✅ Uploaded: ${data.displayName}`;
            generateButton.disabled = false;
        } catch (err) {
            fileInfo.textContent = "❌ Failed to upload file.";
            generateButton.disabled = true;
            console.error(err);
        }
    }

    generateButton.addEventListener("click", async () => {
        if (!uploadedFileUri) return;

        generateButton.disabled = true;
        generateButton.textContent = "Generating...";

        try {
            const res = await fetch("/analyze-file", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ fileUri: uploadedFileUri, text: "generate quiz" })
            });

            if (!res.ok) throw new Error("Quiz generation failed");

            const data = await res.json();
            displayQuiz(data.text);
        } catch (err) {
            quizletOutput.innerHTML = `<div class="alert alert-danger">❌ Failed to generate quizlet.</div>`;
            console.error(err);
        }

        generateButton.textContent = "Generate Quizlet";
        generateButton.disabled = false;
    });

    function displayQuiz(text) {
        quizletOutput.innerHTML = "";

        text = text.trim();
        const firstQuestionIndex = text.indexOf("Question:");
        if (firstQuestionIndex > 0) {
            text = text.substring(firstQuestionIndex);
        }

        const questions = text.split("Question:").filter(q => q.trim() !== "");
        let totalQuestions = questions.length;
        let answeredCount = 0;
        let correctCount = 0;
        const results = [];

        const resultContainer = document.createElement("div");
        resultContainer.classList.add("mt-5", "text-center");
        quizletOutput.appendChild(resultContainer);

        questions.forEach((q, idx) => {
            const lines = q.trim().split('\n').filter(line => line.trim() !== "");
            const questionText = lines[0];
            const options = lines.slice(1).map(opt => opt.trim());

            const correctOption = options.find(opt => opt.startsWith("Correct:"));
            const correctText = correctOption?.replace("Correct:", "").trim();

            const card = document.createElement("div");
            card.classList.add("border", "rounded", "p-4", "bg-white", "shadow");

            card.innerHTML = `
                <h5 class="fw-bold mb-3">Question ${idx + 1}</h5>
                <p class="mb-3">${questionText}</p>
                <div class="answers d-flex flex-column gap-2 mb-3">
                    ${options.map((opt) => {
                const isCorrect = opt.startsWith("Correct:");
                const display = isCorrect ? opt.replace("Correct:", "").trim() : opt;
                return `<button type="button" class="btn btn-outline-dark option" data-answer="${display}">${display}</button>`;
            }).join("")}
                </div>
                <button class="btn btn-warning check-answer">Check</button>
            `;

            const optionsBtns = card.querySelectorAll(".option");
            let selectedBtn = null;

            optionsBtns.forEach(btn => {
                btn.addEventListener("click", () => {
                    optionsBtns.forEach(b => b.classList.remove("active", "btn-success", "btn-danger", "btn-warning"));
                    btn.classList.add("active");
                    selectedBtn = btn;
                });
            });

            const checkBtn = card.querySelector(".check-answer");
            checkBtn.addEventListener("click", () => {
                if (!selectedBtn) {
                    alert("Please select an answer first.");
                    return;
                }

                optionsBtns.forEach(b => b.disabled = true);
                checkBtn.disabled = true;

                const selectedAnswer = selectedBtn.getAttribute("data-answer");

                if (selectedAnswer === correctText) {
                    selectedBtn.classList.remove("btn-outline-dark");
                    selectedBtn.classList.add("btn-success");
                    correctCount++;
                } else {
                    selectedBtn.classList.remove("btn-outline-dark");
                    selectedBtn.classList.add("btn-danger");

                    const correctBtn = [...optionsBtns].find(b => b.getAttribute("data-answer") === correctText);
                    if (correctBtn) {
                        correctBtn.classList.remove("btn-outline-dark");
                        correctBtn.classList.add("btn-warning");
                    }
                }

                answeredCount++;
                results.push({
                    question: questionText,
                    userAnswer: selectedAnswer,
                    correctAnswer: correctText,
                    points: selectedAnswer === correctText ? 1 : 0
                });

                if (answeredCount === totalQuestions) {
                    showResult(correctCount, totalQuestions, resultContainer, results);
                }
            });

            quizletOutput.insertBefore(card, resultContainer);
        });
    }
    function showResult(correct, total, container, results) {
        const percent = Math.round((correct / total) * 100);
        let message = "";

        if (percent <= 20) {
            message = "📘 You should study more on this topic.";
        } else if (percent <= 40) {
            message = "📙 Keep practicing, you're getting there.";
        } else if (percent <= 60) {
            message = "📗 Decent effort! A bit more revision will help.";
        } else if (percent <= 80) {
            flag = true;
            message = "🎯 You're doing well on this topic!";
        } else {
            flag = true;
            message = "🏆 Bravo! You’ve mastered this topic.";
        }

        container.innerHTML = `
            <div class="mt-4">
                <h4 class="fw-bold">${correct}/${total} questions answered correctly</h4>
                <div class="progress my-3" style="height: 25px;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: ${percent}%" aria-valuenow="${percent}" aria-valuemin="0" aria-valuemax="100">${percent}%</div>
                </div>
                <p class="fs-5">${message}</p>
            </div>
            <div class="text-center mt-3">
                <button id="export-button" class="btn btn-success" style="display:none;">
                    Export Results to Excel
                </button>
                <button id="export-certificate-button" class="btn btn-success" style="display:none;">
                    Generate Certificate
                </button>
            </div>

        `;

        document.getElementById("export-button").style.display = "inline-block";
        document.getElementById("export-button").addEventListener("click", async () => {
            try {
                const res = await fetch("/export-results", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ answers: results })
                });

                if (!res.ok) throw new Error("Failed to export");

                const blob = await res.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "QuizResults.xlsx";
                a.click();
                window.URL.revokeObjectURL(url);
            } catch (err) {
                alert("❌ Failed to export results.");
                console.error(err);
            }
        });
        if (flag) {
            document.getElementById("export-certificate-button").style.display = "inline-block";
        }
        document.getElementById("export-certificate-button").addEventListener("click", async () => {
            try {
                const res = await fetch("/export-certificate", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    //body: JSON.stringify({ user: userId })
                });

                if (!res.ok) throw new Error("Failed to generate");

                const blob = await res.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "Certificate.pdf";
                a.click();
                window.URL.revokeObjectURL(url);
            } catch (err) {
                alert("❌ Failed to export certificate.");
                console.error(err);
            }
        });

    }
</script>

